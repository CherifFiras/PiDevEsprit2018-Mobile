package com.codename1.main;

import APIs.GPSApi;
import Entity.User;
import com.codename1.components.FloatingHint;
import com.codename1.components.InfiniteProgress;
import com.codename1.facebook.FaceBookAccess;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.io.Storage;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.io.URL;
import com.codename1.io.URL.HttpURLConnection;
import com.codename1.share.FacebookShare;
import com.codename1.social.FacebookConnect;
import com.codename1.social.Login;
import com.codename1.social.LoginCallback;
import com.codename1.ui.Button;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Graphics;
import com.codename1.ui.Image;
import com.codename1.ui.TextField;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.util.EasyThread;
import com.twilio.Twilio;
import static com.twilio.example.Example.ACCOUNT_SID;
import static com.twilio.example.Example.AUTH_TOKEN;
import controller.Beblio;
import controller.ForumController;
import controller.FriendListController;
import controller.NotificationController;
import controller.SignUpController;
import controller.EvenementController;
import controller.ParamsProfilController;
import controller.ProfilController;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Random;
import service.ChatListener;
import service.ForumService;
import com.twilio.type.PhoneNumber;
import controller.AjoutEspace;
import controller.EspaceController;
import controller.RechercheController;
import controller.ajouter_compteController;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import service.ParamsProfilService;
import service.UtilService;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class MainView {
    UtilService utilService = UtilService.getInstance();

    private Form current;
    private Resources theme;
    private Form f;
    private TextField username;
    private TextField password;
    private Button connecter;
    private Button SignUp;
    private Button Facebook;
    private Button Forget_Password;
    public static final String ACCOUNT_SID = "AC460f6530f76bdcf2d00aa6e381c60729";
    public static final String AUTH_TOKEN = "9052328174de97c9bf3f269679795c54";
    int i = 0;

    public void init(Object context) {        
        Toolbar.setGlobalToolbar(true);
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");
        Controller.theme = theme;
        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        theme = UIManager.initFirstTheme("/theme_1");
        f = new Form();

        f.getTitleArea().setUIID("Container");
        f.setUIID("SignIn");

        f.add(new Label(theme.getImage("Logo.png"), "LogoLabel"));

        TextField username = new TextField("", "Username", 20, TextField.ANY);
        TextField password = new TextField("", "Password", 20, TextField.PASSWORD);
        username.setSingleLineTextArea(false);
        password.setSingleLineTextArea(false);
        Button signIn = new Button("Sign In");
        Button signUp = new Button("Sign Up");
        Button forget_password = new Button("Forgot password ?");
        Button LoginFacebook = new Button("Login Facebook");

        signUp.setUIID("Link");
        Label doneHaveAnAccount = new Label("Don't have an account?");
        Button signUp1 = new Button("Sign Up Vie Web");
        Container content = BoxLayout.encloseY(
                new FloatingHint(username),
                new BaseForm().createLineSeparator(),
                new FloatingHint(password),
                new BaseForm().createLineSeparator(),
                signIn,
                FlowLayout.encloseCenter(doneHaveAnAccount, signUp, LoginFacebook, forget_password, signUp1)
        );

        signUp1.addActionListener(e -> {
            WebDriver driver = new ChromeDriver();
            driver.get(Controller.ip+"/piIntegration/web/app_dev.php/login");
        });

        forget_password.addActionListener(e -> {
            forgotPassword();
        });

        LoginFacebook.addActionListener(e -> {
            fb();
        });
        signIn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                Session sessions = Session.getInstance();
                sessions.setParameters(username.getText(), password.getText());
                if (sessions.initSession()) {
                    try {
                        Image.createImage(Storage.getInstance().createInputStream(sessions.getConnectedUser().getImage()));
                    } catch (IOException ex) {
                    }
                    Beblio.setImage(sessions.getConnectedUser().getImage());
                    Beblio.setId_user(sessions.getConnectedUser().getId());
                    Beblio.setUsername(sessions.getConnectedUser().getUsername());
                    initMainView();
                } else {
                    Dialog.show("Error!", "Login ou mot de passe incorrect!", "Ok", null);
                }
            }
        });

        signUp.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {
                Form mainForm = new Form();
                mainForm.setLayout(new BorderLayout());
                mainForm.getToolbar().setHidden(true);
                mainForm.getContentPane().removeAll();
                SignUpController forumController = new SignUpController();
                forumController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, forumController.getView());
                mainForm.revalidate();
                mainForm.show();
      
            }
        });

        content.setScrollableY(true);
        f.add(content);
        signIn.requestFocus();
        signIn.addActionListener(e -> {
        });
        f.revalidate();
        f.show();
    }

    public void forgotPassword() {

        theme = UIManager.initFirstTheme("/theme_1");
        f = new Form();

        f.getTitleArea().setUIID("Container");
        f.setUIID("SignIn");

        f.add(new Label(theme.getImage("Logo.png"), "LogoLabel"));

        TextField email = new TextField("", "Email", 20, TextField.ANY);
        email.setSingleLineTextArea(false);

        Button signIn = new Button("Sign In");

        Container content = BoxLayout.encloseY(
                new FloatingHint(email),
                new BaseForm().createLineSeparator(),
                new BaseForm().createLineSeparator(),
                signIn,
                FlowLayout.encloseCenter()
        );
        f.add(content);

        signIn.addActionListener(e -> {
            if (email.getText().isEmpty()) {
                Dialog.show("Error", "Email est vide ", "Ok", null);

            } else {
                Beblio.setMail(email.getText());
                code();

            }
        });
        f.show();

    }

    private void initMainView() {
        //----------------------------------------------------------------------------------------
        GPSApi gps = new GPSApi();
        System.out.println("bbbbbbb->"+gps.getGPS());
        User user = Session.getInstance().getFullConnectedUser();
        ParamsProfilService paramsProfilService = new ParamsProfilService();
        paramsProfilService.modifierUserLocation(gps.getGPS());
        //----------------------------------------------------------------------------------------
        theme = UIManager.initFirstTheme("/theme");
        ChatListener chatListener = new ChatListener("127.0.0.1", 9001, Session.getInstance().getConnectedUser());
        EasyThread thread = EasyThread.start("chat");
        thread.run(chatListener);
        Form mainForm = new Form();
        NotificationController notificationController = new NotificationController();
        notificationController.setForm(mainForm);
        notificationController.initialize();
        mainForm.setLayout(new BorderLayout());
        Toolbar toolBar = mainForm.getToolbar();
        toolBar.addCommandToRightBar("", theme.getImage("notifDemande.png"), (ActionListener) (ActionEvent evt) -> {
            mainForm.getContentPane().removeAll();
            mainForm.addComponent(BorderLayout.CENTER, notificationController.getDemandeNotificationView());
            mainForm.revalidate();
        });
        toolBar.addCommandToRightBar("", theme.getImage("notifMessage.png"), (ActionListener) (ActionEvent evt) -> {
            mainForm.getContentPane().removeAll();
            mainForm.addComponent(BorderLayout.CENTER, notificationController.getMessageNotificationView());
            mainForm.revalidate();
        });
        toolBar.addCommandToRightBar("", theme.getImage("notifAccept.png"), (ActionListener) (ActionEvent evt) -> {
            mainForm.getContentPane().removeAll();
            mainForm.addComponent(BorderLayout.CENTER, notificationController.getAcceptNotificationView());
            mainForm.revalidate();
        });
        final Command profileCommand = new Command("Mon Profil") {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                ProfilController profilController = new ProfilController();
                profilController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, profilController.getView());
                mainForm.revalidate();
            }
        };

        Image img = utilService.getImageProfilFromURL(user.getImage());
        mainForm.addCommand(new Command("", img));
        mainForm.addCommand(profileCommand);

        Command c = new Command("Modules");
        Label l = new Label("Acceder à") {

            public void paint(Graphics g) {
                super.paint(g);
                g.drawLine(getX(), getY() + getHeight() - 1, getX() + getWidth(), getY() + getHeight() - 1);
            }
        };
        l.setUIID("Separator");
        c.putClientProperty("SideComponent", l);
        mainForm.addCommand(c);

        mainForm.addCommand(new Command("Recherche", theme.getImage("all friends.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                RechercheController friendListController = new RechercheController();
                friendListController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, friendListController.getView());
                mainForm.revalidate();
            }
        });

        mainForm.addCommand(new Command("Chat", theme.getImage("friend feeds.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                FriendListController friendListController = new FriendListController();
                friendListController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, friendListController.getView());
                mainForm.revalidate();
            }
        });
        
        mainForm.addCommand(new Command("Ajouter Espace", theme.getImage("wall post.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                AjoutEspace espaceController = new AjoutEspace();
                espaceController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, espaceController.getView());
                mainForm.revalidate();
            }
        });

        mainForm.addCommand(new Command("Forum", theme.getImage("photos icon.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                ForumController forumController = new ForumController();
                forumController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, forumController.getView());
                mainForm.revalidate();
            }
        });

        mainForm.addCommand(new Command("Evenement", theme.getImage("wall post.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                EvenementController evenementController = new EvenementController();
                evenementController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, evenementController.getView());
                mainForm.revalidate();
            }
        });

        mainForm.addCommand(new Command("Espace", theme.getImage("wall post.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                EspaceController espaceController = new EspaceController();
                espaceController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, espaceController.getView());
                mainForm.revalidate();
            }
        });

        Command c1 = new Command("ACTIONS");
        Label l1 = new Label("ACTIONS") {

            public void paint(Graphics g) {
                super.paint(g);
                g.drawLine(getX(), getY() + getHeight() - 1, getX() + getWidth(), getY() + getHeight() - 1);
            }
        };
        l1.setUIID("Separator");
        c1.putClientProperty("SideComponent", l1);
        mainForm.addCommand(c1);

        mainForm.addCommand(new Command("Parametres de profil", theme.getImage("wall post.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                ParamsProfilController paramsProfilController = new ParamsProfilController();
                paramsProfilController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, paramsProfilController.getView());
                mainForm.revalidate();  
            }
        });

        mainForm.addCommand(new Command("Logout") {

            public void actionPerformed(ActionEvent evt) {

            }
        });

        mainForm.addCommand(new Command("Quitter") {

            public void actionPerformed(ActionEvent evt) {
                Display.getInstance().exitApplication();
            }
        });

        mainForm.show();
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {

    }

    private Component showMyProfile() {
        final Container c = new Container(new BorderLayout());
        BorderLayout bl = new BorderLayout();
        bl.setCenterBehavior(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE);
        Container p = new Container(bl);
        p.addComponent(BorderLayout.CENTER, new InfiniteProgress());

        c.addComponent(BorderLayout.CENTER, p);

        return c;
    }

    public void code() {

        String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();
        while (salt.length() < 5) { // length of the random string.
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        String saltStr = salt.toString();
        Beblio.setSaltStr(saltStr);
        Twilio.init(ACCOUNT_SID, AUTH_TOKEN);
        com.twilio.rest.api.v2010.account.Message messages = com.twilio.rest.api.v2010.account.Message.creator(new PhoneNumber("+21694053114"),
                new PhoneNumber("+15402962014"), "Votre Code est : " + saltStr).create();
        theme = UIManager.initFirstTheme("/theme_1");
        f = new Form();

        f.getTitleArea().setUIID("Container");
        f.setUIID("SignIn");

        f.add(new Label(theme.getImage("Logo.png"), "LogoLabel"));
        f.add(new Label("Nous Avons Envoyer un code a votre numero"));

        TextField email1 = new TextField("", "Code", 20, TextField.ANY);
        email1.setSingleLineTextArea(false);

        Button signIn1 = new Button("Envoyer !");

        Container content1 = BoxLayout.encloseY(
                new FloatingHint(email1),
                new BaseForm().createLineSeparator(),
                new BaseForm().createLineSeparator(),
                signIn1,
                FlowLayout.encloseCenter()
        );

        signIn1.addActionListener(e -> {

            if (email1.getText().equals(Beblio.getSaltStr())) {

                ForumService ff = new ForumService();
                ArrayList<Entity.User> lis = ff.forgot(Beblio.getMail());
                for (Entity.User r : lis) {
                    String pass = r.getPassword();
                    String nom = r.getUsername();
                    Twilio.init(ACCOUNT_SID, AUTH_TOKEN);

                    com.twilio.rest.api.v2010.account.Message messages1 = com.twilio.rest.api.v2010.account.Message.creator(new PhoneNumber("+21694053114"),
                            new PhoneNumber("+15402962014"), "Bonjour Monsieur : " + nom + " votre mot de passe est : " + pass).create();

                }

                start();

            } else {
                Dialog.show("Error", "Code Invalide !", "Ok", null);
                i = i + 1;

                if (i == 5) {

                    Dialog.show("Error", " Votre Compte est Suspendue !", 10000, null, null, null, 10000);

                    i = 0;

                }

            }

        });

        f.add(content1);
        f.show();
    }

    private void fb() {

        String clientId = "132361634176800";
        String redirectURI = "https://google.com/";
        String clientSecret = "0645e3d4e66ec171e7aaf53bde14b011";
        Login fb = FacebookConnect.getInstance();
        fb.setClientId(clientId);
        fb.setRedirectURI(redirectURI);
        fb.setClientSecret(clientSecret);
        //Sets a LoginCallback listener
        fb.setCallback(new LoginCallback() {
            @Override
            public void loginFailed(String errorMessage) {
                System.out.println("Login Failed");
                Storage.getInstance().writeObject("token", "");
            }

            @Override
            public void loginSuccessful() {
                System.out.println("Login Succed");
                String token = fb.getAccessToken().getToken();
                Storage.getInstance().writeObject("token", token);
            }

        });
        //trigger the login if not already logged in
        if (!fb.isUserLoggedIn()) {

            fb.doLogin();
            ajouter_compteController forumController = new ajouter_compteController();
            forumController.add_user1("Karim", "karim.m1010", "Karim", "Karim.m95@live.fr", "karim");

        } else {

            //get the token and now you can query the facebook API
            String token = fb.getAccessToken().getToken();
            Storage.getInstance().writeObject("token", token);
        }
        String token = (String) Storage.getInstance().readObject("token");
        if (token != null) {
            initMainView();
        }

    }

}
