package com.codename1.main;


import com.codename1.components.InfiniteProgress;
import com.codename1.io.ConnectionRequest;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.io.NetworkManager;
import com.codename1.io.URL;
import com.codename1.io.URL.HttpURLConnection;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.FontImage;
import com.codename1.ui.Graphics;
import com.codename1.ui.Image;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import controller.ForumController;
import java.net.URISyntaxException;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MainView {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        Toolbar.setGlobalToolbar(true);
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        
        Session session = Session.getInstance();
        session.setParameters("firas", "firas");
        session.initSession();
       
        initMainView();
        //----------------
    }
    
    private void initMainView()
    {
        Form mainForm = new Form();
        mainForm.setLayout(new BorderLayout());
        Toolbar toolBar = mainForm.getToolbar();
        
        toolBar.addCommandToRightBar("",theme.getImage("notifDemande.png"), (ActionListener) (ActionEvent evt) -> {
            
        });
        toolBar.addCommandToRightBar("",theme.getImage("notifMessage.png"), (ActionListener) (ActionEvent evt) -> {
            
        });
        toolBar.addCommandToRightBar("",theme.getImage("notifAccept.png"), (ActionListener) (ActionEvent evt) -> {
            
        });

        
        final Command profileCommand = new Command("Mon Profil") {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                mainForm.addComponent(BorderLayout.CENTER, showMyProfile());
                mainForm.revalidate();
            }
        };

        try {
          
            URL url = new URL("https://i.ytimg.com/vi/K4zm30yeHHE/maxresdefault.jpg");
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.connect();
            Image image = Image.createImage(urlConnection.getInputStream());
            image = image.scaled(64, 64);
            mainForm.addCommand(new Command("", image));
        } catch (IOException ex) {
            
        } catch (URISyntaxException ex) {
        }
        mainForm.addCommand(profileCommand);

        Command c = new Command("Modules");
        Label l = new Label("Acceder Ã ") {

            public void paint(Graphics g) {
                super.paint(g);
                g.drawLine(getX(), getY() + getHeight() - 1, getX() + getWidth(), getY() + getHeight() - 1);
            }
        };
        l.setUIID("Separator");
        c.putClientProperty("SideComponent", l);
        mainForm.addCommand(c);

        mainForm.addCommand(new Command("Recherche", theme.getImage("all friends.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                mainForm.addComponent(BorderLayout.CENTER, showMyProfile());
                mainForm.revalidate();
            }
        });

        mainForm.addCommand(new Command("Chat", theme.getImage("friend feeds.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                mainForm.addComponent(BorderLayout.CENTER, showMyProfile());
                mainForm.revalidate();
            }
        });

        mainForm.addCommand(new Command("Forum", theme.getImage("photos icon.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                ForumController forumController = new ForumController();
                forumController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, forumController.getView());
                mainForm.revalidate();
            }
        });

        mainForm.addCommand(new Command("Evenement", theme.getImage("wall post.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                mainForm.addComponent(BorderLayout.CENTER, showMyProfile());
                mainForm.revalidate();
            }
        });
        
        mainForm.addCommand(new Command("Espace", theme.getImage("wall post.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                mainForm.addComponent(BorderLayout.CENTER, showMyProfile());
                mainForm.revalidate();
            }
        });

        Command c1 = new Command("ACTIONS");
        Label l1 = new Label("ACTIONS") {

            public void paint(Graphics g) {
                super.paint(g);
                g.drawLine(getX(), getY() + getHeight() - 1, getX() + getWidth(), getY() + getHeight() - 1);
            }
        };
        l1.setUIID("Separator");
        c1.putClientProperty("SideComponent", l1);
        mainForm.addCommand(c1);

        mainForm.addCommand(new Command("Parametres de profil", theme.getImage("wall post.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                mainForm.addComponent(BorderLayout.CENTER,showMyProfile());
                mainForm.revalidate();
            }
        });
        
        mainForm.addCommand(new Command("Logout") {

            public void actionPerformed(ActionEvent evt) {

            }
        });
        
        mainForm.addCommand(new Command("Quitter") {

            public void actionPerformed(ActionEvent evt) {
                Display.getInstance().exitApplication();
            }
        });
            
        mainForm.show();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
        
    }
    
    private Component showMyProfile() {
        final Container c = new Container(new BorderLayout());
        BorderLayout bl = new BorderLayout();
        bl.setCenterBehavior(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE);
        Container p = new Container(bl);
        p.addComponent(BorderLayout.CENTER, new InfiniteProgress());

        c.addComponent(BorderLayout.CENTER, p);

        return c;
    }

}
