package com.codename1.main;

import com.codename1.components.FloatingHint;
import com.codename1.components.InfiniteProgress;
import com.codename1.facebook.FaceBookAccess;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.io.URL;
import com.codename1.io.URL.HttpURLConnection;
import com.codename1.share.FacebookShare;
import com.codename1.ui.Button;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Graphics;
import com.codename1.ui.Image;
import com.codename1.ui.TextField;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.util.EasyThread;
import controller.Beblio;
import controller.ForumController;
import controller.FriendListController;
import controller.SignUpController;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import org.mindrot.jbcrypt.BCrypt;
import service.ChatListener;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MainView {

    private Form current;
    private Resources theme;
    private Form f;
    private TextField username;
    private TextField password;
    private Button connecter;
    private Button SignUp;
    private Button Facebook;
    private Button Forget_Password;

    public void init(Object context) {
        Toolbar.setGlobalToolbar(true);
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");
        Controller.theme = theme;
        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        theme = UIManager.initFirstTheme("/theme_1");
        f = new Form();
        f.getTitleArea().setUIID("Container");
        f.setUIID("SignIn"); 
        f.add( new Label(theme.getImage("Logo.png"), "LogoLabel"));     
        TextField username = new TextField("", "Username", 20, TextField.ANY);
        TextField password = new TextField("", "Password", 20, TextField.PASSWORD);
        username.setSingleLineTextArea(false);
        password.setSingleLineTextArea(false);
        Button signIn = new Button("Sign In");
        Button signUp = new Button("Sign Up");
        Button forget_password = new Button("Forgot password ?");
        signUp.setUIID("Link");
        Label doneHaveAnAccount = new Label("Don't have an account?");
        Container content = BoxLayout.encloseY(
                new FloatingHint(username),
                new BaseForm().createLineSeparator(),
                new FloatingHint(password),
                new BaseForm().createLineSeparator(),
                signIn,
                FlowLayout.encloseCenter(doneHaveAnAccount, signUp , forget_password)
        );
        
        forget_password.addActionListener(e->{
          forgotPassword();
        
        });
        signIn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                Session sessions = Session.getInstance();
                sessions.setParameters(username.getText(), password.getText());
                if(sessions.initSession())
                {
                    Beblio.setId_user(sessions.getConnectedUser().getId());
                    initMainView();
                }
                else
                    Dialog.show("Error!", "Login ou mot de passe incorrect!", "Ok", null);
            }
        });
        
        signUp.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {
                Form mainForm = new Form();
                mainForm.setLayout(new BorderLayout());
                mainForm.getToolbar().setHidden(true);
                mainForm.getContentPane().removeAll();
                SignUpController forumController = new SignUpController();
                forumController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, forumController.getView());
                mainForm.revalidate();
                mainForm.show();
      
            }
        });
        
        content.setScrollableY(true);
        f.add( content);
        signIn.requestFocus();
        signIn.addActionListener(e ->{});
        f.revalidate();
        f.show();
    }
    
    
    public void forgotPassword()
    {

        theme = UIManager.initFirstTheme("/theme_1");
        f = new Form();
        f.getTitleArea().setUIID("Container");
        f.setUIID("SignIn");      
        f.add( new Label(theme.getImage("Logo.png"), "LogoLabel"));    
        TextField email = new TextField("", "Email", 20, TextField.ANY);
        email.setSingleLineTextArea(false);
        Button signIn = new Button("Sign In");
        Container content = BoxLayout.encloseY(
            new FloatingHint(email),
            new BaseForm().createLineSeparator(),
            new BaseForm().createLineSeparator(),
            signIn,
            FlowLayout.encloseCenter()
        );
        f.add(content);
        signIn.addActionListener(e->{
            FaceBookAccess.setClientId("132361634176800");
            FaceBookAccess.setClientSecret("0645e3d4e66ec171e7aaf53bde14b011");
            FaceBookAccess.setRedirectURI("https://www.google.tn/");
            FaceBookAccess.setPermissions(new String[]{"publish_actions"});
            FaceBookAccess.getInstance().showAuthentication(new ActionListener() {

                public void actionPerformed(ActionEvent evt) {                    
                    FacebookShare f = new FacebookShare();   
                    f.share("J'ai participé a cet evenement http://localhost/TestFOS/web/app_dev.php/event ");
                    System.err.println("sa7it");         
                }
            });
        });
        f.show();  
    }
    
    
    private void initMainView()
    {
        theme = UIManager.initFirstTheme("/theme");
        ChatListener chatListener = new ChatListener("127.0.0.1", 9001,Session.getInstance().getConnectedUser());
        EasyThread thread = EasyThread.start("chat");
        thread.run(chatListener);
        Form mainForm = new Form();
        mainForm.setLayout(new BorderLayout());
        Toolbar toolBar = mainForm.getToolbar();
        
        toolBar.addCommandToRightBar("",theme.getImage("notifDemande.png"), (ActionListener) (ActionEvent evt) -> {
            
        });
        toolBar.addCommandToRightBar("",theme.getImage("notifMessage.png"), (ActionListener) (ActionEvent evt) -> {
            
        });
        toolBar.addCommandToRightBar("",theme.getImage("notifAccept.png"), (ActionListener) (ActionEvent evt) -> {
            
        });

        
        final Command profileCommand = new Command("Mon Profil") {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                mainForm.addComponent(BorderLayout.CENTER, showMyProfile());
                mainForm.revalidate();
            }
        };

        try {
          
            URL url = new URL("https://i.ytimg.com/vi/K4zm30yeHHE/maxresdefault.jpg");
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.connect();
            Image image = Image.createImage(urlConnection.getInputStream());
            image = image.scaled(64, 64);
            mainForm.addCommand(new Command("", image));
        } catch (IOException ex) {
            
        } catch (URISyntaxException ex) {
        }
        mainForm.addCommand(profileCommand);

        Command c = new Command("Modules");
        Label l = new Label("Acceder à") {

            public void paint(Graphics g) {
                super.paint(g);
                g.drawLine(getX(), getY() + getHeight() - 1, getX() + getWidth(), getY() + getHeight() - 1);
            }
        };
        l.setUIID("Separator");
        c.putClientProperty("SideComponent", l);
        mainForm.addCommand(c);

        mainForm.addCommand(new Command("Recherche", theme.getImage("all friends.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                mainForm.addComponent(BorderLayout.CENTER, showMyProfile());
                mainForm.revalidate();
            }
        });

        mainForm.addCommand(new Command("Chat", theme.getImage("friend feeds.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                FriendListController friendListController = new FriendListController();
                friendListController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, friendListController.getView());
                mainForm.revalidate();
            }
        });

        mainForm.addCommand(new Command("Forum", theme.getImage("photos icon.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                ForumController forumController = new ForumController();
                forumController.initialize();
                mainForm.addComponent(BorderLayout.CENTER, forumController.getView());
                mainForm.revalidate();
            }
        });

        mainForm.addCommand(new Command("Evenement", theme.getImage("wall post.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                mainForm.addComponent(BorderLayout.CENTER, showMyProfile());
                mainForm.revalidate();
            }
        });
        
        mainForm.addCommand(new Command("Espace", theme.getImage("wall post.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                mainForm.addComponent(BorderLayout.CENTER, showMyProfile());
                mainForm.revalidate();
            }
        });

        Command c1 = new Command("ACTIONS");
        Label l1 = new Label("ACTIONS") {

            public void paint(Graphics g) {
                super.paint(g);
                g.drawLine(getX(), getY() + getHeight() - 1, getX() + getWidth(), getY() + getHeight() - 1);
            }
        };
        l1.setUIID("Separator");
        c1.putClientProperty("SideComponent", l1);
        mainForm.addCommand(c1);

        mainForm.addCommand(new Command("Parametres de profil", theme.getImage("wall post.png")) {

            public void actionPerformed(ActionEvent evt) {
                mainForm.getContentPane().removeAll();
                mainForm.addComponent(BorderLayout.CENTER,showMyProfile());
                mainForm.revalidate();
            }
        });
        
        mainForm.addCommand(new Command("Logout") {

            public void actionPerformed(ActionEvent evt) {

            }
        });
        
        mainForm.addCommand(new Command("Quitter") {

            public void actionPerformed(ActionEvent evt) {
                Display.getInstance().exitApplication();
            }
        });
            
        mainForm.show();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
        
    }
    
    private Component showMyProfile() {
        final Container c = new Container(new BorderLayout());
        BorderLayout bl = new BorderLayout();
        bl.setCenterBehavior(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE);
        Container p = new Container(bl);
        p.addComponent(BorderLayout.CENTER, new InfiniteProgress());

        c.addComponent(BorderLayout.CENTER, p);

        return c;
    }

}
